{% macro search_filter(all_tags, participated_tags, name, has_filtered_tag, host, api_args) %}
    <div class="search-filter-container">
        <div class="input-container">
            <input class="input-container__search" type="search"
                id="search-input-{{name}}"
                placeholder="{{_('Search by key word or theme')}}"
                onkeyup="{{name}}filterConversationByTagAndName(this);"
            >
            <a class="input-container__filter-theme">
                {{_("Filter by theme")}}
                <i id="{{name}}filter-icon" class="fa fa-chevron-left"></i>
            </a>
        </div>

        <div id="{{name}}-tag-buttons">
            <datalist id="{{name}}-all-tags">
                {% for tag in all_tags %}
                    {% if not tag in participated_tags %}
                        <option value="{{tag}}">
                    {% endif %}
                {% endfor %}
            </datalist>

            <button id="{{name}}-all-conversations-button"
                    class="{{name}}-tag-header__tags--selected"
                    onclick="{{name}}changeStateAllConversations()"
                    data-selected="true">
                    {{ _('All') }}
            </button>

            {% for tag in participated_tags %}
                <button class="{{name}}-tag-header__tags--unselected" onclick="{{name}}changeStateTag(this)" data-selected="false">{{tag}}</button>
            {% endfor %}
        </div>

        {% if participated_tags and not has_filtered_tag %}
            <div class="{{name}}-tag-header__tooltip" id="{{name}}-tag-tooltip">
                <div class="{{name}}-tag-header__tooltip__arrow"></div>
                {{ _('Select to view conversations within that topic.') }}
            </div>
        {% endif %}
    </div>

    <script>

    $('.input-container__filter-theme').on('click', () => {
        filterByTheme("{{name}}");
    })

    let {{name}}selectedTags = [];

    $("#{{name}}-tag-tooltip").insertAfter($(".{{name}}-tag-header__tags--unselected:first"));

    function {{name}}changeStateTag(currentTag){
        const isSelected = JSON.parse(currentTag.dataset.selected);
        const tagName = currentTag.textContent;

        if (isSelected){
            {{name}}selectedTags = {{name}}selectedTags.filter((value)=>{
                return value != tagName;
            });
            {{name}}replaceClass(currentTag, "{{name}}-tag-header__tags--selected", "{{name}}-tag-header__tags--unselected");
        }
        else {
            allConversationsButton = document.getElementById("{{name}}-all-conversations-button");
            const isAllSelected = JSON.parse(allConversationsButton.dataset.selected);
            if(isAllSelected){
                {{name}}replaceClass(allConversationsButton, "{{name}}-tag-header__tags--selected", "{{name}}-tag-header__tags--unselected");
                allConversationsButton.dataset.selected = false;
            }
            {{name}}selectedTags.push(tagName);
            {{name}}replaceClass(currentTag, "{{name}}-tag-header__tags--unselected", "{{name}}-tag-header__tags--selected");
        }
        currentTag.dataset.selected = !isSelected;
        {{name}}getConversationByTag();
        clearInputValue("search-input-{{name}}")
    }
    
    function clearInputValue(input_id) {
        document.getElementById(input_id).value = "";
    }

    function removeErrorMessage(name) {
        let cardsDiv = document.getElementById(`${name}-current-cards`);
        cardsDiv.classList.remove("input-container__warn-message");
    }

    function {{name}}updateCurrentCards(response){
        document.getElementById("{{name}}-current-cards").innerHTML = response;
    }

    function {{name}}getConversationByTag(){
        $.ajax({
            url: "{{ host }}/conversations/tags/{{api_args}}",
            data: { "tags": {{name}}selectedTags },
            traditional: true,
            success: (retrievedConversations) => {
                removeErrorMessage("{{name}}");
                if (retrievedConversations.length == 0) {
                    {{name}}changeStateAllConversations();
                } else {
                    {{name}}updateCurrentCards(retrievedConversations);

                }
            }
        });
    }

    function {{name}}getConversations(){
        $.ajax({
            url: "{{ host }}/conversations/tags/{{api_args}}/",
            success: (retrievedConversations) => {
                removeErrorMessage("{{name}}");
                {{name}}updateCurrentCards(retrievedConversations);
            }
        });
    }

    function {{name}}changeStateAllConversations(){
        allConversationsButton = document.getElementById("{{name}}-all-conversations-button");
        const isSelected = JSON.parse(allConversationsButton.dataset.selected);
        if (isSelected){
            {{name}}replaceClass(allConversationsButton, "{{name}}-tag-header__tags--selected", "{{name}}-tag-header__tags--unselected");
            {{name}}getConversationByTag();
        }
        else {
            tags = document.getElementById("{{name}}-tag-buttons");
            const tagButtons = tags.getElementsByTagName("button");
            for(let tagButton of tagButtons){
                {{name}}replaceClass(tagButton, "{{name}}-tag-header__tags--selected", "{{name}}-tag-header__tags--unselected");
                tagButton.dataset.selected = false;
            }

            {{name}}selectedTags = [];
            {{name}}getConversations();

            {{name}}replaceClass(allConversationsButton, "{{name}}-tag-header__tags--unselected", "{{name}}-tag-header__tags--selected");
        }

        allConversationsButton.dataset.selected = !isSelected;

    }

    function {{name}}replaceClass(element, oldClass, newClass){
        element.classList.remove(oldClass);
        element.classList.add(newClass);
    }

    function {{name}}filterConversationByTagAndName(input){
        $.ajax({
            url: "{{ host }}/conversations/tags/{{api_args}}",
            data: {"tags": {{name}}selectedTags, search_text: input.value},
            traditional: true,
            success: (retrievedConversations) => {
                const warnMessage = "Não há conversas cadastradas com essas palavras-chave dentro deste tema. Por gentileza, refaça a busca."
                let cardsDiv = document.getElementById("{{name}}-current-cards");

                if (retrievedConversations.length >= 1) {
                    {{name}}updateCurrentCards(retrievedConversations);
                    cardsDiv.classList.remove("input-container__warn-message");
                } else {
                    cardsDiv.innerHTML = warnMessage;
                    cardsDiv.classList.add("input-container__warn-message");
                }
            }
        });
    }

    function removeTooltip(type) {
        $(`.${type}-tag-header__tags--unselected`).insertBefore($(`.${type}-tag-header__tooltip`));
        $(`.${type}-tag-header__tooltip`).hide();
        document.removeEventListener("click", () => removeTooltip(type));
    }

    function checkTooltipStatus(type) {
        setTimeout( () => {
            $(document).on("click", document, () => removeTooltip(type)); 
        
        }, 100);
    }

    function filterByTheme(type) {
        let sectionTags = document.getElementById(`${type}-tag-buttons`);
        let filterIconTheme = document.getElementById(`${type}filter-icon`);
        sectionTags.classList.toggle(`${type}-tag-header`);
        filterIconTheme.classList.toggle("move-icon");
        checkTooltipStatus(type);
    }
    </script>

{% endmacro %}
